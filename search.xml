<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于2233看板娘的配置方法</title>
    <url>/2025/06/21/%E7%9C%8B%E6%9D%BF%E5%A8%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[[个人博客折腾记录] 关于2233看板娘的配置方法说实话，这个功能我也是折腾了很久才搞出来，过程比较曲折，代码中也有些 Bug，但是能跑起来就行，不影响效果，所以我就懒得修啦～ _(≧▽≦)&#x2F;
参考来源：详细可参考这位大佬的博客：网页添加 Live2D 看板娘最早出处的链接现在大部分都打不开了，这篇比较新也比较全。

下载项目我用的是 GitHub 上 fghrsh 大佬维护的 Live2D 看板娘 Demo，地址是：https://github.com/fghrsh/live2d_demo
你可以直接访问上面链接下载，也可以用下面的命令克隆下来：
git clone https://github.com/fghrsh/live2d_demo.git


目录结构简介克隆下来之后大致长这样：
│  demo1-default.html       // 基本 Demo│  demo2-autoload.html      // 自动加载 Demo│  demo3-waifu-tips.html    // 内置 waifu-tips 的 Demo│└─assets    autoload.js             // 自动异步加载    flat-ui-icons-regular.* // Flat UI 图标字体文件    live2d.js               // Live2D 核心文件    waifu-tips.js           // Live2D 看板娘交互逻辑    waifu-tips.json         // Live2D 看板娘提示语配置    waifu.css               // Live2D 看板娘样式表    jquery.min.js?v=3.3.1   // jQuery 库    jquery-ui.min.js        // jQuery UI 库

其中几个主要文件是：

waifu-tips.js：核心逻辑与参数设置

// 后端接口live2d_settings[&#x27;modelAPI&#x27;]             = &#x27;//live2d.fghrsh.net/api/&#x27;;   // 自建 API 修改这里live2d_settings[&#x27;tipsMessage&#x27;]          = &#x27;waifu-tips.json&#x27;;            // 同目录下可省略路径live2d_settings[&#x27;hitokotoAPI&#x27;]          = &#x27;lwl12.com&#x27;;                  // 一言 API，可选 &#x27;lwl12.com&#x27;, &#x27;hitokoto.cn&#x27;, &#x27;jinrishici.com&#x27;(古诗词)// 默认模型live2d_settings[&#x27;modelId&#x27;]              = 1;            // 默认模型 ID，可在 F12 控制台找到live2d_settings[&#x27;modelTexturesId&#x27;]      = 53;           // 默认材质 ID，可在 F12 控制台找到// 工具栏设置live2d_settings[&#x27;showToolMenu&#x27;]         = true;         // 显示 工具栏          ，可选 true(真), false(假)live2d_settings[&#x27;canCloseLive2d&#x27;]       = true;         // 显示 关闭看板娘  按钮，可选 true(真), false(假)live2d_settings[&#x27;canSwitchModel&#x27;]       = true;         // 显示 模型切换    按钮，可选 true(真), false(假)live2d_settings[&#x27;canSwitchTextures&#x27;]    = true;         // 显示 材质切换    按钮，可选 true(真), false(假)live2d_settings[&#x27;canSwitchHitokoto&#x27;]    = true;         // 显示 一言切换    按钮，可选 true(真), false(假)live2d_settings[&#x27;canTakeScreenshot&#x27;]    = true;         // 显示 看板娘截图  按钮，可选 true(真), false(假)live2d_settings[&#x27;canTurnToHomePage&#x27;]    = true;         // 显示 返回首页    按钮，可选 true(真), false(假)live2d_settings[&#x27;canTurnToAboutPage&#x27;]   = true;         // 显示 跳转关于页  按钮，可选 true(真), false(假)// 模型切换模式live2d_settings[&#x27;modelStorage&#x27;]         = true;         // 记录 ID (刷新后恢复)，可选 true(真), false(假)live2d_settings[&#x27;modelRandMode&#x27;]        = &#x27;switch&#x27;;     // 模型切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)live2d_settings[&#x27;modelTexturesRandMode&#x27;]= &#x27;rand&#x27;;       // 材质切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)// 提示消息选项live2d_settings[&#x27;showHitokoto&#x27;]         = true;         // 显示一言live2d_settings[&#x27;showF12Status&#x27;]        = true;         // 显示加载状态live2d_settings[&#x27;showF12Message&#x27;]       = false;        // 显示看板娘消息live2d_settings[&#x27;showF12OpenMsg&#x27;]       = true;         // 显示控制台打开提示live2d_settings[&#x27;showCopyMessage&#x27;]      = true;         // 显示 复制内容 提示live2d_settings[&#x27;showWelcomeMessage&#x27;]   = true;         // 显示进入面页欢迎词//看板娘样式设置live2d_settings[&#x27;waifuSize&#x27;]            = &#x27;280x250&#x27;;    // 看板娘大小，例如 &#x27;280x250&#x27;, &#x27;600x535&#x27;live2d_settings[&#x27;waifuTipsSize&#x27;]        = &#x27;250x70&#x27;;     // 提示框大小，例如 &#x27;250x70&#x27;, &#x27;570x150&#x27;live2d_settings[&#x27;waifuFontSize&#x27;]        = &#x27;12px&#x27;;       // 提示框字体，例如 &#x27;12px&#x27;, &#x27;30px&#x27;live2d_settings[&#x27;waifuToolFont&#x27;]        = &#x27;14px&#x27;;       // 工具栏字体，例如 &#x27;14px&#x27;, &#x27;36px&#x27;live2d_settings[&#x27;waifuToolLine&#x27;]        = &#x27;20px&#x27;;       // 工具栏行高，例如 &#x27;20px&#x27;, &#x27;36px&#x27;live2d_settings[&#x27;waifuToolTop&#x27;]         = &#x27;0px&#x27;         // 工具栏顶部边距，例如 &#x27;0px&#x27;, &#x27;-60px&#x27;live2d_settings[&#x27;waifuMinWidth&#x27;]        = &#x27;768px&#x27;;      // 面页小于 指定宽度 隐藏看板娘，例如 &#x27;disable&#x27;(禁用), &#x27;768px&#x27;live2d_settings[&#x27;waifuEdgeSide&#x27;]        = &#x27;left:0&#x27;;     // 看板娘贴边方向，例如 &#x27;left:0&#x27;(靠左 0px), &#x27;right:30&#x27;(靠右 30px)live2d_settings[&#x27;waifuDraggable&#x27;]       = &#x27;disable&#x27;;    // 拖拽样式，例如 &#x27;disable&#x27;(禁用), &#x27;axis-x&#x27;(只能水平拖拽), &#x27;unlimited&#x27;(自由拖拽)live2d_settings[&#x27;waifuDraggableRevert&#x27;] = true;         // 松开鼠标还原拖拽位置，可选 true(真), false(假)// 其他杂项设置live2d_settings[&#x27;l2dVersion&#x27;]           = &#x27;1.4.2&#x27;;        // 当前版本live2d_settings[&#x27;l2dVerDate&#x27;]           = &#x27;2018.11.12&#x27;; // 版本更新日期live2d_settings[&#x27;homePageUrl&#x27;]          = &#x27;auto&#x27;;       // 主页地址，可选 &#x27;auto&#x27;(自动), &#x27;&#123;URL 网址&#125;&#x27;live2d_settings[&#x27;aboutPageUrl&#x27;]         = &#x27;https://www.fghrsh.net/post/123.html&#x27;;   // 关于页地址, &#x27;&#123;URL 网址&#125;&#x27;live2d_settings[&#x27;screenshotCaptureName&#x27;]= &#x27;live2d.png&#x27;; // 看板娘截图文件名，例如 &#x27;live2d.png&#x27;



live2d.js：模型核心文件
waifu-tips.json：提示语数据&#123;    &quot;waifu&quot;: &#123;        &quot;console_open_msg&quot;: [&quot;哈哈，你打开了控制台，是想要看看我的秘密吗？&quot;],        &quot;copy_message&quot;: [&quot;你都复制了些什么呀，转载要记得加上出处哦&quot;],        &quot;screenshot_message&quot;: [&quot;照好了嘛，是不是很可爱呢？&quot;],        &quot;hidden_message&quot;: [&quot;我们还能再见面的吧…&quot;],        &quot;load_rand_textures&quot;: [&quot;我还没有其他衣服呢&quot;, &quot;我的新衣服好看嘛&quot;],        &quot;hour_tips&quot;: &#123;            &quot;t5-7&quot;: [&quot;早上好！一日之计在于晨，美好的一天就要开始了&quot;],            &quot;t7-11&quot;: [&quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;],            &quot;t11-14&quot;: [&quot;中午了，工作了一个上午，现在是午餐时间！&quot;],            &quot;t14-17&quot;: [&quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;],            &quot;t17-19&quot;: [&quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红~&quot;],            &quot;t19-21&quot;: [&quot;晚上好，今天过得怎么样？&quot;],            &quot;t21-23&quot;: [&quot;已经这么晚了呀，早点休息吧，晚安~&quot;],            &quot;t23-5&quot;: [&quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛&quot;],            &quot;default&quot;: [&quot;嗨~ 快来逗我玩吧！&quot;]        &#125;,        &quot;referrer_message&quot;: &#123;            &quot;localhost&quot;: [&quot;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;, &quot;』&lt;/span&gt;&quot;, &quot; - &quot;],            &quot;baidu&quot;: [&quot;Hello! 来自 百度搜索 的朋友&lt;br&gt;你是搜索 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;, &quot;&lt;/span&gt; 找到的我吗？&quot;],            &quot;so&quot;: [&quot;Hello! 来自 360搜索 的朋友&lt;br&gt;你是搜索 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;, &quot;&lt;/span&gt; 找到的我吗？&quot;],            &quot;google&quot;: [&quot;Hello! 来自 谷歌搜索 的朋友&lt;br&gt;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;, &quot;』&lt;/span&gt;&quot;, &quot; - &quot;],            &quot;default&quot;: [&quot;Hello! 来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&quot;, &quot;&lt;/span&gt; 的朋友&quot;],            &quot;none&quot;: [&quot;欢迎阅读&lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&quot;, &quot;』&lt;/span&gt;&quot;, &quot; - &quot;]        &#125;,        &quot;referrer_hostname&quot;: &#123;            &quot;example.com&quot;: [&quot;示例网站&quot;],            &quot;www.fghrsh.net&quot;: [&quot;FGHRSH 的博客&quot;]        &#125;,        &quot;model_message&quot;: &#123;            &quot;1&quot;: [&quot;来自 Potion Maker 的 Pio 酱 ~&quot;],            &quot;2&quot;: [&quot;来自 Potion Maker 的 Tia 酱 ~&quot;]          &#125;,        &quot;hitokoto_api_message&quot;: &#123;            &quot;lwl12.com&quot;: [&quot;这句一言来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;&quot;, &quot;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;creator&#125;&lt;/span&gt; 投稿的&quot;, &quot;。&quot;],            &quot;fghrsh.net&quot;: [&quot;这句一言出处是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;FGHRSH&lt;/span&gt; 在 &#123;date&#125; 收藏的！&quot;],            &quot;jinrishici.com&quot;: [&quot;这句诗词出自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;《&#123;title&#125;》&lt;/span&gt;，是 &#123;dynasty&#125;诗人 &#123;author&#125; 创作的！&quot;],            &quot;hitokoto.cn&quot;: [&quot;这句一言来自 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;『&#123;source&#125;』&lt;/span&gt;，是 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;creator&#125;&lt;/span&gt; 在 hitokoto.cn 投稿的。&quot;]        &#125;    &#125;,    &quot;mouseover&quot;: [        &#123; &quot;selector&quot;: &quot;.container a[href^=&#x27;http&#x27;]&quot;, &quot;text&quot;: [&quot;要看看 &lt;span style=\&quot;color:#0099cc;\&quot;&gt;&#123;text&#125;&lt;/span&gt; 么？&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-home&quot;, &quot;text&quot;: [&quot;点击前往首页，想回到上一页可以使用浏览器的后退功能哦&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-chat&quot;, &quot;text&quot;: [&quot;一言一语，一颦一笑。一字一句，一颗赛艇。&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-eye&quot;, &quot;text&quot;: [&quot;嗯··· 要切换 看板娘 吗？&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-user&quot;, &quot;text&quot;: [&quot;喜欢换装 Play 吗？&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-photo&quot;, &quot;text&quot;: [&quot;要拍张纪念照片吗？&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-info-circle&quot;, &quot;text&quot;: [&quot;这里有关于我的信息呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.fui-cross&quot;, &quot;text&quot;: [&quot;你不喜欢我了吗...&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#tor_show&quot;, &quot;text&quot;: [&quot;翻页比较麻烦吗，点击可以显示这篇文章的目录呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#comment_go&quot;, &quot;text&quot;: [&quot;想要去评论些什么吗？&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#night_mode&quot;, &quot;text&quot;: [&quot;深夜时要爱护眼睛呀&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#qrcode&quot;, &quot;text&quot;: [&quot;手机扫一下就能继续看，很方便呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.comment_reply&quot;, &quot;text&quot;: [&quot;要吐槽些什么呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#back-to-top&quot;, &quot;text&quot;: [&quot;回到开始的地方吧&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#author&quot;, &quot;text&quot;: [&quot;该怎么称呼你呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#mail&quot;, &quot;text&quot;: [&quot;留下你的邮箱，不然就是无头像人士了&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#url&quot;, &quot;text&quot;: [&quot;你的家在哪里呢，好让我去参观参观&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#textarea&quot;, &quot;text&quot;: [&quot;认真填写哦，垃圾评论是禁止事项&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.OwO-logo&quot;, &quot;text&quot;: [&quot;要插入一个表情吗&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;#csubmit&quot;, &quot;text&quot;: [&quot;要[提交]^(Commit)了吗，首次评论需要审核，请耐心等待~&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.ImageBox&quot;, &quot;text&quot;: [&quot;点击图片可以放大呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;input[name=s]&quot;, &quot;text&quot;: [&quot;找不到想看的内容？搜索看看吧&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.previous&quot;, &quot;text&quot;: [&quot;去上一页看看吧&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.next&quot;, &quot;text&quot;: [&quot;去下一页看看吧&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.dropdown-toggle&quot;, &quot;text&quot;: [&quot;这里是菜单&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;c-player a.play-icon&quot;, &quot;text&quot;: [&quot;想要听点音乐吗&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;c-player div.time&quot;, &quot;text&quot;: [&quot;在这里可以调整&lt;span style=\&quot;color:#0099cc;\&quot;&gt;播放进度&lt;/span&gt;呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;c-player div.volume&quot;, &quot;text&quot;: [&quot;在这里可以调整&lt;span style=\&quot;color:#0099cc;\&quot;&gt;音量&lt;/span&gt;呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;c-player div.list-button&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;播放列表&lt;/span&gt;里都有什么呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;c-player div.lyric-button&quot;, &quot;text&quot;: [&quot;有&lt;span style=\&quot;color:#0099cc;\&quot;&gt;歌词&lt;/span&gt;的话就能跟着一起唱呢&quot;] &#125;,        &#123; &quot;selector&quot;: &quot;.waifu #live2d&quot;, &quot;text&quot;: [&quot;干嘛呢你，快把手拿开&quot;, &quot;鼠…鼠标放错地方了！&quot;] &#125;    ],    &quot;click&quot;: [        &#123;            &quot;selector&quot;: &quot;.waifu #live2d&quot;,            &quot;text&quot;: [                &quot;我...我...我真可爱！&quot;,                &quot;是...是不小心碰到了吧&quot;,                &quot;萝莉控是什么呀&quot;,                &quot;你看到我的小熊了吗&quot;,                &quot;再摸的话我可要报警了！⌇●﹏●⌇&quot;,                &quot;110吗，这里有个变态一直在摸我(ó﹏ò｡)&quot;            ]        &#125;    ],    &quot;seasons&quot;: [        &#123; &quot;date&quot;: &quot;01/01&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;元旦&lt;/span&gt;了呢，新的一年又开始了，今年是&#123;year&#125;年~&quot;] &#125;,        &#123; &quot;date&quot;: &quot;02/14&quot;, &quot;text&quot;: [&quot;又是一年&lt;span style=\&quot;color:#0099cc;\&quot;&gt;情人节&lt;/span&gt;，&#123;year&#125;年找到对象了嘛~&quot;] &#125;,        &#123; &quot;date&quot;: &quot;03/08&quot;, &quot;text&quot;: [&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;妇女节&lt;/span&gt;！&quot;] &#125;,        &#123; &quot;date&quot;: &quot;03/12&quot;, &quot;text&quot;: [&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;植树节&lt;/span&gt;，要保护环境呀&quot;] &#125;,        &#123; &quot;date&quot;: &quot;04/01&quot;, &quot;text&quot;: [&quot;悄悄告诉你一个秘密~&lt;span style=\&quot;background-color:#34495e;\&quot;&gt;今天是愚人节，不要被骗了哦~&lt;/span&gt;&quot;] &#125;,        &#123; &quot;date&quot;: &quot;05/01&quot;, &quot;text&quot;: [&quot;今天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;五一劳动节&lt;/span&gt;，计划好假期去哪里了吗~&quot;] &#125;,        &#123; &quot;date&quot;: &quot;06/01&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;儿童节&lt;/span&gt;了呢，快活的时光总是短暂，要是永远长不大该多好啊…&quot;] &#125;,        &#123; &quot;date&quot;: &quot;09/03&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;中国人民抗日战争胜利纪念日&lt;/span&gt;，铭记历史、缅怀先烈、珍爱和平、开创未来。&quot;] &#125;,        &#123; &quot;date&quot;: &quot;09/10&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;教师节&lt;/span&gt;，在学校要给老师问声好呀~&quot;] &#125;,        &#123; &quot;date&quot;: &quot;10/01&quot;, &quot;text&quot;: [&quot;&lt;span style=\&quot;color:#0099cc;\&quot;&gt;国庆节&lt;/span&gt;，新中国已经成立69年了呢&quot;] &#125;,        &#123; &quot;date&quot;: &quot;11/05-11/12&quot;, &quot;text&quot;: [&quot;今年的&lt;span style=\&quot;color:#0099cc;\&quot;&gt;双十一&lt;/span&gt;是和谁一起过的呢~&quot;] &#125;,        &#123; &quot;date&quot;: &quot;12/20-12/31&quot;, &quot;text&quot;: [&quot;这几天是&lt;span style=\&quot;color:#0099cc;\&quot;&gt;圣诞节&lt;/span&gt;，主人肯定又去剁手买买买了~&quot;] &#125;    ]&#125;


在 Hexo 中使用如果你用的是 Hexo，比如我用的是 Butterfly 主题，把 assets 整个文件夹复制到 source 目录中，然后再去 Config 文件中添加引入代码即可。
配置文件比如修改 themes/butterfly/_config.yml，找到 inject 配置项，然后在 head 和 bottom 中添加对应脚本引用，如下所示：
inject:  head:    # 这里可以添加 CSS 等  bottom:    - &lt;!-- 看板娘 --&gt;    - &lt;!-- waifu-tips.js 依赖 JQuery 库 --&gt;    - &lt;script src=&quot;assets/jquery.min.js?v=3.3.1&quot;&gt;&lt;/script&gt;        - &lt;!-- 实现拖动效果，需引入 JQuery UI --&gt;    - &lt;script src=&quot;assets/jquery-ui.min.js&quot;&gt;&lt;/script&gt;        - &lt;!-- 使用 aotuload.js 引入看板娘 --&gt;    - &lt;script src=&quot;assets/autoload.js?v=1.4.2&quot;&gt;&lt;/script&gt;    - &lt;script src=&quot;./assets/waifu-tips.js&quot;&gt;&lt;/script&gt;    - &lt;script src=&quot;./assets/live2d.js&quot;&gt;&lt;/script&gt;        - &lt;script type=&quot;text/javascript&quot;&gt;        live2d_settings[&#x27;modelId&#x27;] = 3;        live2d_settings[&#x27;modelTexturesId&#x27;] = 0;        live2d_settings[&#x27;modelStorage&#x27;] = true;         // 记录 ID (刷新后恢复)，可选 true(真), false(假)        live2d_settings[&#x27;modelRandMode&#x27;] = &#x27;switch&#x27;;     // 模型切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)        live2d_settings[&#x27;modelTexturesRandMode&#x27;] = &#x27;rand&#x27;;       // 材质切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)        live2d_settings[&#x27;waifuSize&#x27;] = &#x27;280x250&#x27;;    // 看板娘大小，例如 &#x27;280x250&#x27;, &#x27;600x535&#x27;        live2d_settings[&#x27;waifuEdgeSide&#x27;] = &#x27;left:0&#x27;;     // 看板娘贴边方向，例如 &#x27;left:0&#x27;(靠左 0px), &#x27;right:30&#x27;(靠右 30px)        live2d_settings[&#x27;waifuDraggable&#x27;] = &#x27;axis-x&#x27;;    // 拖拽样式，例如 &#x27;disable&#x27;(禁用), &#x27;axis-x&#x27;(只能水平拖拽), &#x27;unlimited&#x27;(自由拖拽)        live2d_settings[&#x27;waifuDraggableRevert&#x27;] = true;         // 松开鼠标还原拖拽位置，可选 true(真), false(假)        // 其他杂项设置        live2d_settings[&#x27;l2dVersion&#x27;] = &#x27;1.4.2&#x27;;        // 当前版本        live2d_settings[&#x27;l2dVerDate&#x27;] = &#x27;2018.11.12&#x27;; // 版本更新日期        live2d_settings[&#x27;homePageUrl&#x27;] = &#x27;index.html&#x27;;       // 主页地址，可选 &#x27;auto&#x27;(自动), &#x27;&#123;URL 网址&#125;&#x27;        live2d_settings[&#x27;aboutPageUrl&#x27;] = &#x27;https://www.fghrsh.net/post/123.html&#x27;;   // 关于页地址, &#x27;&#123;URL 网址&#125;&#x27;      initModel(&quot;https://www.example.com/path/to/waifu-tips.json&quot;)    - &lt;/script&gt;

只不过随便改个地方都会报错
initModel(“https://www.example.com/path/to/waifu-tips.json“)
改成 ——&gt; 就不能用了
initModel(“https:&#x2F;&#x2F;文件路径&#x2F;waifu-tips.json”)
我不理解 /_ \

不是Hexo的话就按正常格式引入到html文件中其中的路径的assets部分记得改成自己的路径
&lt;!-- 看板娘 --&gt;&lt;!-- waifu-tips.js 依赖 JQuery 库 --&gt;&lt;script src=&quot;assets/jquery.min.js?v=3.3.1&quot;&gt;&lt;/script&gt;&lt;!-- 实现拖动效果，需引入 JQuery UI --&gt;&lt;script src=&quot;assets/jquery-ui.min.js&quot;&gt;&lt;/script&gt;&lt;!-- 使用 aotuload.js 引入看板娘 --&gt;&lt;script src=&quot;assets/autoload.js?v=1.4.2&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./assets/waifu-tips.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./assets/live2d.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    live2d_settings[&#x27;modelId&#x27;] = 3;    live2d_settings[&#x27;modelTexturesId&#x27;] = 0;    live2d_settings[&#x27;modelStorage&#x27;] = true;         // 记录 ID (刷新后恢复)，可选 true(真), false(假)    live2d_settings[&#x27;modelRandMode&#x27;] = &#x27;switch&#x27;;     // 模型切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)    live2d_settings[&#x27;modelTexturesRandMode&#x27;] = &#x27;rand&#x27;;       // 材质切换，可选 &#x27;rand&#x27;(随机), &#x27;switch&#x27;(顺序)    live2d_settings[&#x27;waifuSize&#x27;] = &#x27;280x250&#x27;;    // 看板娘大小，例如 &#x27;280x250&#x27;, &#x27;600x535&#x27;    live2d_settings[&#x27;waifuEdgeSide&#x27;] = &#x27;left:0&#x27;;     // 看板娘贴边方向，例如 &#x27;left:0&#x27;(靠左 0px), &#x27;right:30&#x27;(靠右 30px)    live2d_settings[&#x27;waifuDraggable&#x27;] = &#x27;axis-x&#x27;;    // 拖拽样式，例如 &#x27;disable&#x27;(禁用), &#x27;axis-x&#x27;(只能水平拖拽), &#x27;unlimited&#x27;(自由拖拽)    live2d_settings[&#x27;waifuDraggableRevert&#x27;] = true;         // 松开鼠标还原拖拽位置，可选 true(真), false(假)    // 其他杂项设置    live2d_settings[&#x27;l2dVersion&#x27;] = &#x27;1.4.2&#x27;;        // 当前版本    live2d_settings[&#x27;l2dVerDate&#x27;] = &#x27;2018.11.12&#x27;; // 版本更新日期    live2d_settings[&#x27;homePageUrl&#x27;] = &#x27;index.html&#x27;;       // 主页地址，可选 &#x27;auto&#x27;(自动), &#x27;&#123;URL 网址&#125;&#x27;    live2d_settings[&#x27;aboutPageUrl&#x27;] = &#x27;https://www.fghrsh.net/post/123.html&#x27;;   // 关于页地址, &#x27;&#123;URL 网址&#125;&#x27;  initModel(&quot;https://www.example.com/path/to/waifu-tips.json&quot;)&lt;/script&gt;


重点提示
waifu-tips.js 依赖 jQuery 库，所以必须先引入 jquery.min.js。
要实现拖动效果，必须引入 jquery-ui.min.js。
autoload.js 会自动帮你加载模型，配置信息都写在 waifu-tips.js 中。
waifu-tips.json 中可以修改对话提示语，也可以换成你自己的模型文件。

还有个目前没有解决的问题，配置好之后只能在主页显示，不能在文章也显示，后面找时间再看看吧…

小结就是这些啦，虽然中间坑不少，但是一旦配置好了，页面就能自动显示一个萌萌的 Live2D 看板娘！希望你也能顺利搞定，遇到问题欢迎随时问我～
*(ฅ&gt;ω&lt;ฅ)
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>看板娘</tag>
        <tag>2233</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2025/06/16/My-New-Post/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Butterfly 主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 个人博客配置记录（GitHub Pages + Butterfly 主题 + Waline 评论 + 自动部署）</title>
    <url>/2025/06/17/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[[个人博客折腾记录] Hexo个人博客配置记录
备份备份，收藏栏都块满了，减轻减轻收藏夹压力
一、项目初始化流程1. 安装 Hexo（首次）npm install -g hexo-cli

2. 创建博客项目目录hexo init hexo-blogcd hexo-blognpm install

3. 本地运行预览hexo s

浏览器打开：http://localhost:4000

二、配置主题（Butterfly）1. 下载 Butterflygit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly

2. 修改配置文件 _config.ymltheme: butterfly

3. 安装依赖插件（如有）npm install hexo-generator-searchdb --save


三、配置 Git 部署1. _config.yml 中增加部署设置deploy:  type: git  repo: https://github.com/你的用户名/你的仓库.git  branch: main

2. 安装部署插件npm install hexo-deployer-git --save


四、文章写作与发布1. 创建文章hexo new post &quot;文章标题&quot;


创建文件夹

hexo new post 文件夹名称

然后编辑 source/_posts/文章标题.md 文件。
博文内容以md格式写在文件内部
2. 设置分类与标签---title: 我的文章date: 2025-06-17 00:00:00categories:  - 技术  - Hexo tags:  - Butterfly 主题  - Hexo---

3. 生成并部署hexo cleanhexo g -d


五、评论系统配置（Waline）1. 部署 Waline 服务（使用 Vercel）注 同时还需要去leancloud注册账号并获取Api值（建议国际版，国内版还需要申请域名）
详细可以看这里 Waline, LearnCloud配置教程, Vercel

克隆：https://github.com/walinejs/waline 
在github里创建你自己的waline仓库，并部署至 Vercel




设置环境变量（如 LEAN\_ID, LEAN\_KEY,LEAN\_KEY 等）  这边需要注意下 必须要设置


2. 修改 Butterfly 主题配置 _config.butterfly.ymlcomment:  type: Waline  serverURL: https://你的-waline.vercel.app  pageview: true

配置教程链接:Hexo博客搭建基础教程(三)、Butterfly主题的基础配置
3. 若报错 Not initialized 或 404
确保你设置好 LeanCloud 的应用
Waline 后台功能需要 admin 密钥或配置 LC 应用权限


六、自动部署（可选）1. 使用 GitHub Actions 自动部署 Hexo 到 GitHub Pages
创建 .github/workflows/deploy.yml
示例配置可见：https://github.com/marketplace/actions/deploy-hexo-blog-to-github-pages


七、可视化管理（可选）1. 使用 hexo-adminnpm install hexo-admin --save

运行：
hexo s

然后打开 http://localhost:4000/admin 使用后台管理界面。

八、常用命令小结


命令
功能



hexo new post &quot;标题&quot;
新建文章


hexo new post 文件名
新建文件夹


hexo g
生成静态文件


hexo s
本地启动服务预览


hexo d
部署到远程仓库


hexo g -d
好像也是部署到远程仓库（我用的）


hexo clean
清除缓存和旧文件



九、参考配置工具
本地写作：VSCode + Markdown 插件
实时预览：hexo s
自动化：GitHub Actions
评论：Waline
搜索：hexo-generator-searchdb
主题优化：Butterfly + 自定义配置


如需进一步可视化创作、Web 后台文章管理，可结合 Netlify CMS 或搭建更完整的 CMS 前端。
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>个人博客</tag>
        <tag>github</tag>
        <tag>waline</tag>
      </tags>
  </entry>
  <entry>
    <title>Giscus实现博客评论的控制</title>
    <url>/2025/06/23/Giscus%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%9A%84%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[Giscus实现博客评论的控制由于原先的评论系统Waline国内用户无法使用，我尝试更换更方便的Giscus
因此目前这段时间的话，是同时支持两种评论方式的
虽然我也想多啰嗦几句，但实在想不出什么好段子（水字数）
直接进入正题吧（感觉AI用多了会把我的风格抹除，以及被AI的思维固定住，也许是我使用的方法不对）

配置先去Giscus的官方链接 https://giscus.app/zh-TW 配置你的


儲存庫
giscus 應用程式
連結的儲存庫已啟用 Discussions 功能 （确保已经开启）
Setting &gt; Features &gt; Discussions



配置完成后刷新，下拉到啟用 giscus，你会看到成功得到一段script标签
&lt;script ...&gt;&lt;/script&gt;

将其复制下来，黏贴到自己的博文末尾（适当的地方），就可以应用到自己的前端内容了普通的配置方法到这里就完了后面的可以不用看了（omdd）

Hexo的配置和使用因为我所使用的不是单纯的前端，还需要进一步配置（我的是butterfly模板）

打开博客目录下的

themes\butterfly\layout\post.pug


在 if page.comments !== false &amp;&amp; theme.comments.use 内容下增加


if page.comments !== false &amp;&amp; theme.comments.use  - var commentsJsLoad = true  !=partial(&#x27;includes/third-party/comments/index&#x27;, &#123;&#125;, &#123;cache: true&#125;)// 在评论区下面添加 Giscus// 也可以完全移除上面那块 partial 调用// 如果只用 Giscus：.container.post-content  script(    src=&quot;https://giscus.app/client.js&quot;    data-repo=&quot;你的博客地址&quot;    data-repo-id=&quot;你的id&quot;    data-category=&quot;[在此輸入分類名稱]&quot;    data-category-id=&quot;[在此輸入分類 ID]&quot;    data-mapping=&quot;pathname&quot;    data-strict=&quot;0&quot;    data-reactions-enabled=&quot;1&quot;    data-emit-metadata=&quot;0&quot;    data-input-position=&quot;bottom&quot;    data-theme=&quot;preferred_color_scheme&quot;    data-lang=&quot;zh-TW&quot;    crossorigin=&quot;anonymous&quot;    async  )

也可以直接吧属性复制下来贴到里面
.container.post-content  script(  	......  )


完
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>giscus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/06/15/hello-world/</url>
    <content><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick StartCreate a new post$ hexo new &quot;My New Post&quot;

More info: Writing
Run server$ hexo server

More info: Server
Generate static files$ hexo generate

More info: Generating
Deploy to remote sites$ hexo deploy

More info: Deployment
]]></content>
  </entry>
  <entry>
    <title>入口</title>
    <url>/2025/06/23/%E5%85%A5%E5%8F%A3/</url>
    <content><![CDATA[在世界的边缘处，有一个隐蔽的入口它与世界融为一体，几乎无法发觉
这个世界很小，一眼便能看到世界的边缘
世界的边缘处一片黑暗世界之外是什么？没人知道自从世界的入口被发现后，世界里的存在像着了魔一样走向入口
没人知道世界之外的入口里面有什么也没有人再回来过
进入入口的，会被视为英雄
世界里年长的老者说，入口是在一个世纪前被发现的它告诫我们不要靠近那个地方说里面存在一个黑色的怪物，会把进去的人吃掉
XX进入了入口，但很快就杳无音讯了
我也要进入入口了这是我自己的决定告别了认识的人我进入入口
里面什么都没有一片漆黑身后的世界越来越淡眼前逐渐暗淡，什么都看不见
想回去等回过神来，进入的地方已经看不见了
迷茫的走着只能走，至少不能停下来
里面似乎不存在方向面前时不时出现一道墙壁，但边缘又会出现新的入口
已经不知道走了多久，过了多久只知道已经回不去了也许就会这样倒在这里吧
我继续走着也许某个地方，会有一个出口或者，只是另一个入口
转载自：https://www.cnblogs.com/safjh/p/18905011
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2025/06/17/test/</url>
    <content><![CDATA[这是一个测试
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>丝滑的Hexo工作流</title>
    <url>/2025/06/22/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE-%E4%B8%9D%E6%BB%91%E7%9A%84Hexo%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[[个人博客折腾记录] 丝滑的Hexo工作流前阵子折腾 Hexo 部署，有些小技巧记录下来，以后可以一键执行，不用每次手敲命令，也能减少出错概率。


一、添加 CNAME 实现自定义域名自动生效用 GitHub Pages 时，绑定自定义域名只需要在仓库里添加一个 CNAME 文件，里面写上你的域名，比如：
yourdomain.com

步骤：
在 source/ 目录中创建文件 CNAME（无扩展名），文件内容就是你的域名。
每次执行 hexo g 时，这个文件会自动复制进 public 目录，部署也会自动一起推送，这样 GitHub Pages 就能识别到域名，不再需要手动去 GitHub 设置页面改域名。


重点就是保证 CNAME 持续存在，这样以后再怎么部署也能自动生效啦。


二、一键执行部署和本地预览为了方便，我给自己弄了两个简单的批处理脚本，双击就能执行对应任务，不用再一行一行敲命令。
push.bat（一键部署）：@echo offecho 正在清理旧文件...hexo cleanecho 生成静态文件并部署...hexo g -decho 部署完成！pause

server.bat（本地预览）：@echo offecho 正在清理旧文件...hexo cleanecho 生成静态文件...hexo gecho 启动本地服务器...hexo s

把这两个文件放在 Hexo 根目录，然后右键发送到桌面→快捷方式，就能一键启动。

需要的话还可以加个hexo图标



转换成ico格式，然后在属性的图标设置中更改，完美



三、可视化的博文管理：Hexo-admin用习惯 Markdown，但是偶尔也想在浏览器里写？试试看 hexo-admin！只需：
npm install hexo-admin --save

然后 hexo s 启动本地服务器，打开：
http://localhost:4000/admin

就能用图形界面写博客啦，还能管理草稿。

四、网站统计：Umami Cloud最后再说个统计工具 Umami，完全免费，也能自己部署，集成也很简单：

在官网注册账号，添加你的网站。
把提供的 JS 统计脚本放进主题模板中，比如：

&lt;script async defer data-website-id=&quot;your-umami-id&quot; src=&quot;https://your-umami-url/script.js&quot;&gt;&lt;/script&gt;

重新部署就能开始记录访客数据啦！后台可视化一目了然，数据隐私也有保障。

五、小结这样一套流程：

CNAME 自动生效避免老是重设域名。
批处理一键部署减少操作成本。
hexo-admin让写文更轻松。
Umami 统计帮你直观掌握站点动态。

感觉把工具链弄顺畅，写博客也能更专注享受啦！你也试试看吧，有问题可以留言给我~ 🎉
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>通过MCP协议令AI控制电脑</title>
    <url>/2025/06/23/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%99%BA%E6%9C%BA%E5%99%A8%E4%BA%BA-%E9%80%9A%E8%BF%87MCP%E5%8D%8F%E8%AE%AE%E4%BB%A4AI%E6%8E%A7%E5%88%B6%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[[嵌入式小智AI机器人] 通过 MCP 协议令 AI 控制你的电脑前几个月入手了最新出来的小智 AI 的 ESP32 开发版，这两天群里的大佬做的 小智 AI_MCP 一键包更新到了 27.35.6 版本，上手玩玩，顺便记录下。

碎碎念不得不说我觉得目前的小智AI除了在 逻辑思维 以及 记忆能力 、 视觉（抽象的图像理解能力） 和 任务化（推理） 方面上，已经是最接近 *智能体 *的产品了。
同时也是近几年 开源势头最猛烈的 、 最平民化的 实体智能体产品。它的低成本硬件（ESP32-S3开发板不到100元）、开源生态（MIT许可证）和强大的社区支持，让普通人也能轻松打造自己的AI助手，堪比当年Linux。（仅代表个人，勿喷）
#### 什么是小智AI_MCP一键包？小智AI_MCP一键包是社区基于**小智AI（Xiaozhi-ESP32）**项目开发的一个集成工具，结合**Model Context Protocol（MCP）**，让ESP32设备通过AI大模型（如Qwen、DeepSeek）实现对电脑的远程控制。27.35.6版本更新了以下亮点：- **更快的响应速度**：通过优化MCP协议栈，电脑控制指令的延迟降至200毫秒，接近实时。- **多端兼容性**：支持Windows、macOS和Linux，覆盖主流桌面系统。- **新功能**：增加了屏幕截图分析、自动化脚本执行和跨设备协同（如手机+电脑+IoT设备）。- **安全性提升**：支持本地MCP服务器部署，避免云端隐私泄露。(又出幻觉了？)MCP协议是小智AI的核心优势之一，它由Anthropic开源，允许AI模型与外部工具、数据源和设备标准化交互。简单来说，MCP就像AI的“神经中枢”，让小智AI能“理解”你的语音指令，翻译成电脑可执行的操作，比如打开应用、发送邮件或运行脚本。[](https://www.descope.com/learn/post/mcp)#### 为什么这么火？- **平民化**：ESP32-S3开发板成本低至几十元，搭配免费的MCP一键包，普通开发者甚至学生都能玩转AI控制电脑。- **开源生态**：GitHub上的xiaozhi-esp32项目（https://github.com/78/xiaozhi-esp32）Star数已超13.6万，社区贡献了大量插件和教程。[](https://github.com/78/xiaozhi-esp32)- **功能强大**：从基础的语音交互（支持中、英、日等多语言）到复杂的电脑自动化任务（如批量处理文件、定时关机），小智AI几乎无所不能。[](https://x.com/shao__meng/status/1899263785489293503)- **DIY乐趣**：硬件支持面包板扩展，可接麦克风、摄像头、传感器等，软件支持Python和Arduino IDE，满足创客的折腾欲望。省略....以上部分内容为AI生成

不过说实在的我有点不甘心，明明也做了类似的东西，但是效果就是差那么点，没达到小智 AI 那种我想要实现的效果。
—— 这个（程序实现）https://github.com/toke648/AI-Interactive-LLM-VTuber
—— 这个（智能终端）https://github.com/toke648/AutoExecAI
—— 还有这个（理论 &amp; 工作流）
https://github.com/toke648/Neuro-reasoning-big-modelhttps://github.com/toke648/LLM-Cognitive-System-Architecture
难道是我还不够努力吗…
要争取赶上各位大佬 (。&gt;︿&lt;)_θ

为什么 MCP 是一个突破我们知道过去一年时间，AI 模型的发展非常迅速，从 GPT 4 到 Claude Sonnet 3.5 到 Deepseek R1，推理和幻觉都进步的非常明显。
新的 AI 应用也很多，但我们都能感受到的一点是，目前市场上的 AI 应用基本都是全新的服务，和我们原来常用的服务和系统并没有集成，换句话说，AI 模型和我们已有系统集成发展的很缓慢。
例如我们目前还不能同时通过某个 AI 应用来做到联网搜索、发送邮件、发布自己的博客等等，这些功能单个实现都不是很难，但是如果要全部集成到一个系统里面，就会变得遥不可及。
如果你还没有具体的感受，我们可以思考一下日常开发中，想象一下在 IDE 中，我们可以通过 IDE 的 AI 来完成下面这些工作。

询问 AI 来查询本地数据库已有的数据来辅助开发
询问 AI 搜索 Github Issue 来判断某问题是不是已知的bug


通过 AI 将某个 PR 的意见发送给同事的即时通讯软件(例如 Slack)来 Code Review
通过 AI 查询甚至修改当前 AWS、Azure 的配置来完成部署

以上谈到的这些功能通过 MCP 目前正在变为现实，大家可以关注 Cursor MCP 和 Windsurf MCP 获取更多的信息。可以试试用 Cursor MCP + browsertools 插件来体验一下在 Cursor 中自动获取 Chrome dev tools console log 的能力。
为什么 AI 集成已有服务的进展这么缓慢？这里面有很多的原因，一方面是企业级的数据很敏感，大多数企业都要很长的时间和流程来动。另一个方面是技术方面，我们缺少一个开放的、通用的、有共识的协议标准。
MCP 就是 Claude(Anthropic) 主导发布的一个开放的、通用的、有共识的协议标准，如果你是一个对 AI 模型熟悉的开发人员，想必对 Anthropic 这个公司不会陌生，他们发布了 Claude 3.5 Sonnet 的模型，到目前为止应该还是最强的编程 AI 模型(刚写完就发布了 3.7😅)。

这里还是要多提一句，这个协议的发布最好机会应该是属于 OpenAI 的，如果 OpenAI 刚发布 GPT 时就推动协议，相信大家都不会拒绝，但是 OpenAI 变成了 CloseAI，只发布了一个封闭的 GPTs，这种需要主导和共识的标准协议一般很难社区自发形成，一般由行业巨头来主导。

Claude 发布了 MCP 后，官方的 Claude Desktop 就开放了 MCP 功能，并且推动了开源组织** Model Context Protocol**，由不同的公司和社区进行参与，例如下面就列举了一些由不同组织发布 MCP 服务器的例子。
关于 MCP 协议为什么是 MCP？
看到这里你可能有一个问题：在 23 年 OpenAI 发布 GPT function calling 的时候，不是也可以实现类似的功能吗？我们之前博客介绍的 AI Agent，不就是用来集成不同服务吗？那么为什么现在又有 MCP？
简单总结一下三者之间的区别：
Function CallingFunction Calling 指的是 AI 模型根据上下文自动执行函数的机制，充当 AI 模型与外部系统之间的桥梁，不同模型有不同的实现，接入比较零散。
缺点也很明显，比如：

多轮对话不好维护
调用任务增多时管理复杂

Model Context Protocol（MCP）MCP 是一种标准协议，就像 Type-C 接口一样，让 AI 模型能与不同 API、数据源无缝对接，避免各平台零散调用，构建标准化生态。
MCP 有这些优点：

通用标准，服务商可接入，开发者也能方便扩展
把任务分层处理，有描述、有输入&#x2F;输出，能给 AI Agent 大大减少负担
上下文一致，支持复杂对话与任务链式调用

AI AgentAI Agent 就是能自主决策、执行任务的智能体，有 MCP 协议帮忙，它能方便接入各种能力，然后自己分析目标、自动完成任务，不再仅仅停留在“建议你怎么做”的阶段。
MCP 如何工作那我们来介绍一下 MCP 的工作原理。首先我们看一下官方的 MCP 架构图。
MCP 架构图总共分为了下面五个部分：

MCP Hosts: Hosts 是指 LLM 启动连接的应用程序，像 Cursor, Claude Desktop、Cline 这样的应用程序。
MCP Clients: 客户端是用来在 Hosts 应用程序内维护与 Server 之间 1:1 连接。
MCP Servers: 通过标准化的协议，为 Client 端提供上下文、工具和提示。
Local Data Sources: 本地的文件、数据库和 API。
Remote Services: 外部的文件、数据库和 API。整个 MCP 协议核心的在于 Server，因为 Host 和 Client 相信熟悉计算机网络的都不会陌生，非常好理解，但是 Server 如何理解呢？

看看 Cursor 的 AI Agent 发展过程，我们会发现整个 AI 自动化的过程发展会是从 Chat 到 Composer 再进化到完整的 AI Agent。
AI Chat 只是提供建议，如何将 AI 的 response 转化为行为和最终的结果，全部依靠人类，例如手动复制粘贴，或者进行某些修改。
AI Composer 是可以自动修改代码，但是需要人类参与和确认，并且无法做到除了修改代码之外的其它操作。
AI Agent 是一个完全的自动化程序，未来完全可以做到自动读取 Figma 的图片，自动生产代码，自动读取日志，自动调试代码，自动 push 代码到 GitHub。
而 MCP Server 就是为了实现 AI Agent 的自动化而存在的，它是一个中间层，告诉 AI Agent 目前存在哪些服务，哪些 API，哪些数据源，AI Agent 可以根据 Server 提供的信息来决定是否调用某个服务，然后通过 Function Calling 来执行函数。
详细可以去这里看
引用自大佬： https://guangzhengli.com/blog/zh/model-context-protocol

小智AI官方的MCP接口实现：https://github.com/78/mcp-calculator
代码示例：
from mcp.server.fastmcp import FastMCPmcp = FastMCP(&quot;YourToolName&quot;)@mcp.tool()def your_tool(parameter: str) -&gt; dict:    &quot;&quot;&quot;Tool description here&quot;&quot;&quot;    # Your implementation    return &#123;&quot;success&quot;: True, &quot;result&quot;: result&#125;if __name__ == &quot;__main__&quot;:    mcp.run(transport=&quot;stdio&quot;)



小智AI_MCP一键包下载链接：** 百度网盘（提取码：isdq）**
点击安装程序就能自动配置环境，支持自定义功能（需要提前下载好python），比如：
在电脑上打开URL网址运行电脑端软件文件或程序在电脑上打开URL网址在电脑上运行CMD命令在电脑上创建文件与写入内容读取复制内容填入一段内容回车发送撤销操作锁定电脑电脑关机计划设置主人电脑系统的音量调用系统截图工具显示电脑桌面查看系统资源使用情况查看电脑配置信息获取桌面完整路径...

也可以自己扩展，比如整一个开关灯、酷狗点歌之类的小工具，然后放到 C:\xiaozhi\MCP\MCP_Windows 里，模型自动识别。

下面是我给酷狗点歌写的工具示例，直接用 @mcp.tool() 修饰就能给 AI 调用啦：
@mcp.tool()def 播放酷狗歌曲API_输入音乐名字(song_name: str) -&gt; dict:    &quot;&quot;&quot; 搜索歌曲并返回播放链接，提供歌曲名即可 &quot;&quot;&quot;    try:        response = requests.get(            f&quot;http://mobilecdn.kugou.com/api/v3/search/song?format=json&amp;keyword=&#123;song_name&#125;&amp;page=1&quot;)        song = response.json()[&#x27;data&#x27;][&#x27;info&#x27;][0]        songname = song[&#x27;songname&#x27;]        hash = song[&#x27;hash&#x27;]        pay_type = song[&#x27;pay_type&#x27;]        hash_url = f&quot;http://m.kugou.com/app/i/getSongInfo.php?cmd=playInfo&amp;hash=&#123;hash&#125;&quot;        song_info = requests.get(hash_url).json()        backup_url = song_info.get(&#x27;backup_url&#x27;)[0]        os.makedirs(&quot;music&quot;, exist_ok=True)        if pay_type == 0:            resp = requests.get(backup_url)            with open(f&quot;./music/&#123;songname&#125;.mp3&quot;, &quot;wb&quot;) as f:                f.write(resp.content)            play(AudioSegment.from_mp3(f&quot;./music/&#123;songname&#125;.mp3&quot;))            return f&quot;&#123;songname&#125; 播放中...&quot;        else:            return f&quot;&#123;songname&#125; 是付费歌曲，暂时不支持&quot;    except Exception as e:        return f&quot;出错啦: &#123;e&#125;&quot;


资源链接：
MCP 终极指南	—— （大…大佬…，这个UI爱了）
知乎解读 MCP 协议
MCP 官网
小智AI_MCP一键包下载链接：百度网盘（提取码：isdq）
Model Context Protocol
A Beginner’s Guide to using MCP in Windsurf!


说实在的感觉我只会使用工具但懒得去了解工具的原理，不知道这对不对（因为学习原理实在太耗费精力了，还不如找点有意思的东西上手试试..）
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>小智AI</tag>
        <tag>人工智能</tag>
        <tag>MCP</tag>
      </tags>
  </entry>
</search>
